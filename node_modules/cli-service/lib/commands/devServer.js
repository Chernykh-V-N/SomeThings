var opn = require('opn')
var path = require('path')
var express = require('express')
var webpack = require('webpack')
var merge = require('webpack-merge')
var proxyMiddleware = require('http-proxy-middleware')
var webpackConfig = require('../config/development')
var getConfig = require('../util/getConfig')
var resolveProject = require('../util/resolveProject')

// default port where dev server listens for incoming traffic
var port = process.env.PORT || getConfig('port')
// automatically open browser, if not set will be false
var autoOpenBrowser = !!getConfig('autoOpenBrowser')
// Define HTTP proxies to your custom API backend
// https://github.com/chimurai/http-proxy-middleware
var proxyTable = getConfig('proxyTable')

var app = express()

webpackConfig = merge(webpackConfig, process.PROJECT_CONFIG.webpackConfig || {})

// add hot-reload related code to entry chunks
Object.keys(webpackConfig.entry).forEach(function(name) {
  webpackConfig.entry[name] = [path.resolve(__dirname, './devClient.js')].concat(
    webpackConfig.entry[name]
  )
})

var compiler = webpack(webpackConfig)

var devMiddleware = require('webpack-dev-middleware')(compiler, {
  publicPath: webpackConfig.output.publicPath,
  quiet: true
})

var hotMiddleware = require('webpack-hot-middleware')(compiler, {
  log: () => {},
  heartbeat: 2000
})

// proxy api requests
Object.keys(proxyTable).forEach(function(context) {
  var options = proxyTable[context]
  if (typeof options === 'string') {
    options = {
      target: options
    }
  }
  app.use(proxyMiddleware(options.filter || context, options))
})

app.use('/ping/check', function(req, res) {
  res.json({
    message: 'ok!'
  })
  res.end()
})

// handle fallback for HTML5 history API
app.use(require('connect-history-api-fallback')())

// serve webpack bundle output
app.use(devMiddleware)

// enable hot-reload and state-preserving
// compilation error display
app.use(hotMiddleware)

// serve pure static assets
var staticPath = path.posix.join(
  getConfig('assetsPublicPath'),
  getConfig('assetsSubDirectory')
)
app.use(staticPath, express.static(resolveProject('./static')))

var uri = process.env.HOST || 'http://localhost:' + port

var _resolve
var readyPromise = new Promise(resolve => {
  _resolve = resolve
})

console.log('> Starting dev server...')
devMiddleware.waitUntilValid(() => {
  console.log('> Listening at ' + uri + '\n')
  // when env is testing, don't need open it
  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {
    opn(uri)
  }
  _resolve()
})

var server = app.listen(port)

module.exports = {
  ready: readyPromise,
  close: () => {
    server.close()
  }
}
